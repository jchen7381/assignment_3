# Assignment-3 Hashing and Heaps
The goal of this assignment is hashing and heaps. It includes testing three hashing implementations.
Quadratic probing, linear probing, and Double hashing. We will use our best hashing implementation for a simple spell-checker.

Part 1 : Hashing
Collisions: occurs when more than one value to be hashed by a particular hash function hash to the same slot
in the table or data structure (hash table) being generated by the hash function.

Probing: a hash table probe operation is used to retrieve rows from a temporary hash table based upon a probe lookup operation.

Quadratic probing: an open addressing scheme in computer programming for resolving hash collisions in hash tables. 
A probing method which probes according to a quadratic formula, specifically: P(x) = ax2 + bx +c, where a, b, c are constants and a != 0 
otherwise we will have linear probing.

Linear Probing: an collision resolving technique in Open Addressed Hash tables. In this method, each cell of a hash table stores a single 
keyâ€“value pair. If a collision is occurred by mapping a new key to a cell of the hash table that is already occupied by another key.

Double Hashing:is a computer programming technique used in conjunction with open addressing in hash tables to resolve hash collisions,
by using a secondary hash of the key as an offset when a collision occurs. (x) = R - (x mod R).

Through different types of hashing we will find the following:

Total number of elements in the table (N)
The size of the table (T)
The load factor (N/T)
The total number of collisions (C)
The average number of collisions (C/N)

Using query_words.txt, we will check if the word is found or not found and how many probes it took to find the word if it exist.
<word1> Found <probes1>
<word2> Not_Found <probes2>
<word3> Found <probes3>

How to run:

	make clean
	make all
	./create_and_test_hash <words file name> <query words file name> <flag>
  
  <flag> being "quadratic" for quadratic probing, "linear" for linear probing, and "double" for double hashing.
  
  ./create_and_test_hash words.txt query_words.txt double <R VALUE>
  
  I used the R VALUE: 89 implemented in my double_hashing.h
 
Input:   
  
  words.txt
  query.txt
				 
Output: 
	
  number_of_elements: 500
  size_of_table: 1350
  load_factor: 0.37037037
  collisions: 3
  avg_collisions: 0.006
	
  law Found 1 
  factz Not_Found 3
  book Found 1

Part 2: Spell Checker

Using linear, quadratic, or double hashing. The program will output the correct spelled words and the misspelled words. For each
misspelled word, it will provide a list of candidate corrections from the dictionary that is formed by applying one of the following
rules to the misspelled word:
CASE A: adding one charactor in any possible position
CASE B: removing one charactor from the word
CASE C: swapping adjacent characters in the word

<word1> is CORRECT
<word2> is CORRECT
<word3> is INCORRECT
** <word3> -> <alternate word> ** case <TYPE: A, B, or C>
<word4> is CORRECT

How to run:

./spell_check <document file> <dictionary file>

<document file>
document1_short.txt
document1.txt

<dictionary file>
wordsEN.txt 

Input:

<document file>
document1_short.txt
document1.txt

<dictionary file>
wordsEN.txt 

Output:
descision is CORRECT
likely is CORRECT
interpretation is CORRECT
lwa is INCORRECT
** lwa -> wa ** case B
** lwa -> la ** case B
** lwa -> law ** case C
cases is CORRECT

Things I had trouble with:
Implementing the double hashing (x) = R - (x mod R)
Figuring out CASE A but eventually figuring it out but I think it's inefficient.

If I had more time:

I would successfully submit the assignment on time.
Figure and manage a more efficient method for each spellchecking case especially for CASE A.


